

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://fanventory.github.io/</id>
  <title>Fanventory</title>
  <subtitle>有空的时候随便写点东西.</subtitle>
  <updated>2025-06-26T23:29:38+08:00</updated>
  <author>
    <name>Fanventory</name>
    <uri>https://fanventory.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://fanventory.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://fanventory.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Fanventory </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>读书笔记 —— 装饰者模式</title>
    <link href="https://fanventory.github.io/posts/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="读书笔记 —— 装饰者模式" />
    <published>2023-10-18T10:47:00+08:00</published>
  
    <updated>2023-10-18T10:47:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <content src="https://fanventory.github.io/posts/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="Reading Notes" />
    
    <category term="Head First Design Patterns" />
    
  

  
    <summary>
      





      装饰者模式

  装饰者模式是提供一些装饰者来包裹对象，在对象方法的前、后增加新的功能，从而实现功能扩展。





场景

我们现在要为一家咖啡店设计一个订单系统，由于咖啡的种类有很多，所以我们想到先创建一个子类，然后创建不同的父类代表不同种类的咖啡。下面我们给出第一个版本。

第一个版本

子类如下所示：


  
    
      Beverage
    
  
  
    
      description
    
    
       
    
    
      getDescription()
    
    
      cost()
    
  


其中description字段表示咖啡的描述，比如当前这杯咖啡是“最优深度烘焙，半糖的”。cost()方法是这杯咖啡的价格，我们可以定义为抽象方法。

然后我们导入咖啡类型，以蒸馏咖啡Espres...
    </summary>
  

  </entry>

  
  <entry>
    <title>读书笔记 —— 观察者模式</title>
    <link href="https://fanventory.github.io/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="读书笔记 —— 观察者模式" />
    <published>2023-10-17T10:53:00+08:00</published>
  
    <updated>2023-10-17T10:53:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <content src="https://fanventory.github.io/posts/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="Reading Notes" />
    
    <category term="Head First Design Patterns" />
    
  

  
    <summary>
      





      观察者模式

  观察者模式是对象之间存在一对多依赖时，当一个对象改变状态，其被依赖的对象都能收到通知并进行更新。





场景

我们现在有一个需求，气象传感器收集湿度、温度、气压信息，然后通过信息采集模块采集数据后，我们编写一款气象监测程序来获取这些数据，并显示在用户设备上。如下图所示：



我们只关心绿色的WeatherData类部分，类中方法如下所示：


  
    
      WeatherData
    
  
  
    
      getTemperature()
    
    
      getHumidity()
    
    
      getPressure()
    
    
      measurementsChanged()
    
  


底层硬件提供了getTemperature()、getHumidity()、...
    </summary>
  

  </entry>

  
  <entry>
    <title>刷题笔记 ——  分割字符串Ⅱ</title>
    <link href="https://fanventory.github.io/posts/%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/" rel="alternate" type="text/html" title="刷题笔记 ——  分割字符串Ⅱ" />
    <published>2023-10-13T15:30:00+08:00</published>
  
    <updated>2023-10-13T15:30:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <content src="https://fanventory.github.io/posts/%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="leetcode" />
    
  

  
    <summary>
      





      Dynamic Programming

  该题要求将字符串分割成若干个回文串，难点在于如何构建状态方程。





题目
给定一个字符串 s，请将 s 分割成一些子串，使每个子串都是回文串。

返回符合要求的 最少分割次数 。

例子

示例1

输入：s = "aab"
输出：1
解释：只需一次分割就可将 s 分割成 ["aa","b"] 这样两个回文子串。


示例2

输入：s = "a"
输出：0


示例3

输入：s = "ab"
输出：1


条件

  1 &amp;lt;= s.length &amp;lt;= 2000
  s 仅由小写英文字母组成


难点分析

我们一个朴素的想法是，一个长度为n的回文串，最多分割n-1次。那我们可以定义一个dp数组，其中dp[i]表示第i位到字符串结尾的最小分割次数，初始值是dp[i] = n - i - 1;
如果中间某一部分能构成回文...
    </summary>
  

  </entry>

  
  <entry>
    <title>C++ —— 动态库加载函数</title>
    <link href="https://fanventory.github.io/posts/extern/" rel="alternate" type="text/html" title="C++ —— 动态库加载函数" />
    <published>2023-08-03T21:18:00+08:00</published>
  
    <updated>2023-08-03T21:18:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/extern/</id>
    <content src="https://fanventory.github.io/posts/extern/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="other" />
    
    <category term="C++" />
    
  

  
    <summary>
      





      extern

  本文介绍了extern关键字的作用，我们可以分为两种：(1)extern关键字用于声明变量和函数；(2)extern “C”用于指示编译器将代码按照C语言的风格进行编译和连接。接着我们通过例子说明了如何在C++中调用C的代码以及如何在C中调用C++的代码。最后我们需要注意混合使用C和C++时，应该统一地使用函数和函数指针，避免它们两者的编译和连接方式不同。





extern关键字

extern的作用是用来声明变量和函数的。

我们先来看函数的声明：

extern int method();    //  函数声明
int method()            //  函数定义
{
    ... 
}

//  由于函数的声明和定义可以清楚地区分开来，所以extern关键字可以省略
int method();


但是变量的声明和定义并不能清楚的区分开...
    </summary>
  

  </entry>

  
  <entry>
    <title>C++ —— 动态库加载函数</title>
    <link href="https://fanventory.github.io/posts/%E5%8A%A8%E6%80%81%E5%BA%93%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="C++ —— 动态库加载函数" />
    <published>2023-08-03T21:18:00+08:00</published>
  
    <updated>2023-08-03T21:18:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E5%8A%A8%E6%80%81%E5%BA%93%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/</id>
    <content src="https://fanventory.github.io/posts/%E5%8A%A8%E6%80%81%E5%BA%93%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="other" />
    
    <category term="C++" />
    
  

  
    <summary>
      





      dlsym/dlopen

  在实际开发中我们有这样一些需求：为系统调用设置钩子函数。所以我们需要重写系统调用，而且为了避免大量修改代码，修改后的钩子函数需要和原来的系统调用重名。为了解决原来的系统调用符号丢失的问题，dlsym函数可以从动态库中获取符号地址，然后利用这些符号地址实现原来系统调用的功能。对于自定义的动态库，可以利用dlopen函数先加载自定义动态库，再利用dlsym函数获取符号地址。





问题场景

有时候我们需要对系统调用函数进行包装，我们的要求是包装后的函数名和系统调用的名字相同(因为我们的旧代码可能有大量的系统调用，一个一个修改显然费时费力)。这时会有两个问题：

  原来的系统调用符号丢失了，我们该怎么调用原来的系统调用函数？
  包装后的新函数名和原来的系统调用重名了，会发生了冲突吗？


dlsym

要解决第一个问题，我们可以从动态库中获取原来系...
    </summary>
  

  </entry>

</feed>


